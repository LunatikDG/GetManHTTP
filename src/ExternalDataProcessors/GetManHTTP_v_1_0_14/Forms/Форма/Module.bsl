// @strict-types


#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипАвторизацииПриИзменении(Элемент)
	
	СкрытьГруппыАвторизаций();
	
	Если ТипАвторизации = "BasicAuth" Тогда
		Элементы.ЛогинПароль.Видимость = Истина;
	ИначеЕсли ТипАвторизации = "Token" Тогда
		Элементы.ГруппаТокен.Видимость = Истина;
	Иначе
		Элементы.ЛогинПароль.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отправить(Команда)
	
	ПроверкаУсловий = УсловияОтправкиВыполнены();
	
	Если ПроверкаУсловий.УсловияВыполнены  Тогда
		ОтправитьHTTPЗапросАсинх(СтруктураURI(URI));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// КЛИЕНТ

// Скрывает группы авторизаций на форме
//
&НаКлиенте
Процедура СкрытьГруппыАвторизаций()

	Элементы.ЛогинПароль.Видимость = Ложь;
	Элементы.ГруппаТокен.Видимость = Ложь;

КонецПроцедуры

// Сформировать заголовки запроса
// 
// Возвращаемое значение:
//	Соответствие - заголовки HTTP-запроса
//
&НаКлиенте
Функция ЗаголовкиЗапроса()

	ЗаголовкиЗапросаПользователя = ЗаголовкиВСоответствие();
	
	// Дополняем заголовки авторизацией
	Если ТипАвторизации = "Token" Тогда
		СтрокаТокена = ?(ПустаяСтрока(НаименованиеТокена), "Token ", НаименованиеТокена + " ") + ТокенАвторизации;
		ЗаголовкиЗапросаПользователя.Вставить("Authorization", СтрокаТокена);
	КонецЕсли;

	Возврат ЗаголовкиЗапросаПользователя;

КонецФункции

// Проверяет выполнение всех условий для отправки HTTP-запроса
//
// Возвращаемое значение:
//	Структура:
//		* УсловияВыполнены - Булево - Признак того может ли быть отправлен HTTP-запроса
//
&НаКлиенте
Функция УсловияОтправкиВыполнены()
	Результат = Новый Структура;
	
	Результат.Вставить("УсловияВыполнены", Истина);
	
	Возврат Результат;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//                       <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>.
//
// Возвращаемое значение:
//  Структура - составные части URI согласно формату:
//   * Схема        	- Строка - схема из URI.
//   * Логин         	- Строка - логин из URI.
//   * Пароль        	- Строка - пароль из URI.
//   * ИмяСервера    	- Строка - часть <хост>:<порт> из URI.
//   * Хост          	- Строка - хост из URI.
//   * Порт          	- Число, Неопределено - порт из URI.
//   * ПутьНаСервере 	- Строка - часть <путь>?<параметры>#<якорь> из URI.
//   * ТипАвторизации 	- Строка - Используемый тип авторизации
//
&НаКлиенте
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	Результат.Вставить("ТипАвторизации", "");
	
	ДополнитьАвторизациюВСтруктурURI(Результат);
	
	ДополнитьПараметрыЗапросаВСтруктуруURI(Результат);

	Возврат Результат;
	
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
&НаКлиенте
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

// Дополняет структуру URI авторизацией (Basic Auth)
// 
// Параметры:
//	URI - Структура:
//			- см. СтруктураURI
&НаКлиенте
Процедура ДополнитьАвторизациюВСтруктурURI(URI)

	URI.ТипАвторизации = ТипАвторизации;
	
	Если ТипАвторизации = "BasicAuth" Тогда
		URI.Логин = ЛогинBasicAuth;
		URI.Пароль = ПарольBasicAuth;
	КонецЕсли;

КонецПроцедуры

// Дополнить структуру URI параметрами запроса
// Параметры:
//	URI - Структура:
//			- см. СтруктураURI
&НаКлиенте
Процедура ДополнитьПараметрыЗапросаВСтруктуруURI(URI)

	URI.ПутьНаСервере = URI.ПутьНаСервере + ПараметрыВСтроку();

КонецПроцедуры

// Отправка HTTP-запроса по указанным данным пользователем
// Параметры:
//	URI - Структура:
//			- см. СтруктураURI
//
&НаКлиенте
Асинх Процедура ОтправитьHTTPЗапросАсинх(URI)
	
	ЗапросОтвет = "";
	КодОтвета = 0;
	
	Если URI.Схема = "https" Тогда
		Если URI.ТипАвторизации = "BasicAuth" Тогда
			HTTPСоединение = Новый HTTPСоединение(URI.Хост, 443, URI.Логин, URI.Пароль ,Новый ЗащищенноеСоединениеOpenSSL());
		Иначе
			HTTPСоединение = Новый HTTPСоединение(URI.Хост, 80 );
		КонецЕсли;
	Иначе
		Если URI.ТипАвторизации = "BasicAuth" Тогда
			HTTPСоединение = Новый HTTPСоединение(URI.Хост, 80, URI.Логин, URI.Пароль);
		Иначе
			HTTPСоединение = Новый HTTPСоединение(URI.Хост, 80);
		КонецЕсли;
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(URI.ПутьНаСервере);
	
	Если ЗначениеЗаполнено(ТелоЗапроса)Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, "UTF-8");
	КонецЕсли;
	
	HTTPЗапрос.Заголовки = ЗаголовкиЗапроса();
	
	СтартЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Обещание  = HTTPСоединение.ВызватьHTTPМетодАсинх(HTTPМетод, HTTPЗапрос);
	
	Результат = Ждать Обещание;
	
	КонецЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ВремяВыполненияЗапроса = Строка(КонецЗамера - СтартЗамера) + " ms";
	
	КодОтвета = Результат.КодСостояния;
	
	Если Результат.КодСостояния = 200 Тогда
		ЗапросОтвет = Результат.ПолучитьТелоКакСтроку()
	Иначе
		ЗапросОтвет = Результат.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецПроцедуры



// СЕРВЕР

// Преобразует таблицу значений в массив структур.
// Может использоваться для передачи на клиент данных в том случае, если таблица
// значений содержит только такие значения, которые могут
// быть переданы с сервера на клиент.
//
// Полученный массив содержит структуры, каждая из которых повторяет
// структуру колонок таблицы значений.
//
// Не рекомендуется использовать для преобразования таблиц значений
// с большим количеством строк.
//
// Возвращаемое значение:
//  Соответствие - коллекция строк таблицы в виде структур.
//
&НаСервере
Функция ЗаголовкиВСоответствие()
    // Создаем пустое соответствие
    Соответствие = Новый Соответствие;
    ЗаголовкиЗапросаТЗ = ЗаголовкиЗапроса.Выгрузить();
    // Проверка наличия строк в таблице
    Если ЗаголовкиЗапросаТЗ.Количество() = 0 Тогда
        Возврат Соответствие; // Возвращаем пустое соответствие
    КонецЕсли;
    
    // Проходим по всем строкам таблицы значений
    Для Каждого Строка Из ЗаголовкиЗапросаТЗ Цикл
        // Проверяем наличие хотя бы двух столбцов
        Если ЗаголовкиЗапросаТЗ.Колонки.Количество() >= 2 Тогда
            Ключ = Строка[0];
            Значение = Строка[1];
            // Добавляем в соответствие
            Соответствие.Вставить(Ключ, Значение);
        КонецЕсли;
    КонецЦикла;
    
    // Возвращаем готовое соответствие
    Возврат Соответствие;
КонецФункции

&НаСервере
Функция ПараметрыВСтроку()
	
	СтрокаПараметров = "";
	
	ТаблицаПараметров = ПараметрыЗапроса.Выгрузить();
	
	Для Каждого Параметр ИЗ ТаблицаПараметров Цикл
	
		СтрокаПараметров = СтрокаПараметров + СтрШаблон("%1=%2&", Параметр[0], Параметр[1]);
	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаПараметров) Тогда
		СтрокаПараметров = "?" + Лев(СтрокаПараметров, СтрДлина(СтрокаПараметров)-1);
	КонецЕсли;
	
	Возврат СтрокаПараметров;
	
КонецФункции

#КонецОбласти
